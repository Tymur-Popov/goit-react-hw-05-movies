{"version":3,"file":"static/js/387.e484c24d.chunk.js","mappings":"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","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport noPhoto from './components/images/images.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '8fb08ce7c4baf0eda528d5cdd76e2668',\n  include_adult: false,\n};\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrending = async () => {\n  return axios\n    .get(`/trending/all/day?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchByQuery = async query => {\n  return axios\n    .get(`/search/movie?query=${query}`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, title, poster_path: poster }) => ({\n        id,\n        title,\n        poster: IMG_URL + poster,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieDetails = movieId => {\n  return axios\n    .get(`/movie/${movieId}?`)\n    .then(\n      ({\n        data: {\n          id,\n          poster_path: poster,\n          title,\n          release_date: releaseYear,\n          vote_average: userScore,\n          overview,\n          genres,\n        },\n      }) => ({\n        id,\n        poster: IMG_URL + poster,\n        title,\n        releaseYear: new Date(releaseYear).getFullYear(),\n        userScore: Math.round(userScore * 10),\n        overview,\n        genres,\n      })\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieCredits = movieId => {\n  return axios\n    .get(`/movie/${movieId}/credits?`)\n    .then(({ data: { cast } }) =>\n      cast.map(({ id, name, character, profile_path: photo }) => ({\n        id,\n        name,\n        character,\n        photo: photo ? IMG_URL + photo : noPhoto,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n\nexport const fetchMovieReviews = movieId => {\n  return axios\n    .get(`/movie/${movieId}/reviews?`)\n    .then(({ data: { results } }) =>\n      results.map(({ id, author, content }) => ({\n        id,\n        author,\n        content,\n      }))\n    )\n    .catch(error => {\n      console.log(error.message);\n    });\n};\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px;\n  background-color: #3f51b542;\n  margin: 20px 30px 30px;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  max-width: 100%;\n  margin-top: 0;\n  margin-left: auto;\n  margin-right: auto;\n  justify-content: center;\n  padding: 0;\n  transition-duration: 300ms;\n`;\n\nexport const CastItem = styled.li`\n  background: rgb(255, 255, 255);\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  width: 100%;\n  max-width: 200px;\n  margin: 10px;\n  border-radius: 5px;\n  display: inline-block;\n  text-decoration: none;\n  color: black;\n  transition-duration: 300ms;\n`;\n\nexport const Img = styled.img`\n  padding: 0px;\n  margin: 0px;\n  height: 260px;\n  width: 100%;\n  display: block;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n`;\n\nexport const CastDescr = styled.div`\n  padding: 5px;\n  margin: 0px;\n  font-size: 10px;\n  color: #3f51b5;\n`;\n\nexport const CastName = styled.h3`\n  margin: 0px;\n`;\n\nexport const CastChar = styled.p`\n  margin: 0px;\n`;\n","import { fetchMovieCredits } from '../../api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  CastContainer,\n  CastList,\n  CastItem,\n  Img,\n  CastDescr,\n  CastName,\n  CastChar,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams('movieId');\n  const [credits, setCredits] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId).then(setCredits);\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      {credits.length > 0 && (\n        <CastList>\n          {credits.map(({ id, name, character, photo }) => {\n            return (\n              <CastItem key={id}>\n                <Img src={photo} alt={name} />\n                <CastDescr>\n                  <CastName>{name}</CastName>\n                  <CastChar>Character: {character}</CastChar>\n                </CastDescr>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n    </CastContainer>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","api_key","include_adult","IMG_URL","fetchTrending","then","data","results","map","id","title","poster","poster_path","catch","error","console","log","message","fetchByQuery","query","fetchMovieDetails","movieId","releaseYear","release_date","userScore","vote_average","overview","genres","Date","getFullYear","Math","round","fetchMovieCredits","cast","name","character","photo","profile_path","noPhoto","fetchMovieReviews","author","content","CastContainer","styled","CastList","CastItem","Img","CastDescr","CastName","CastChar","useParams","useState","credits","setCredits","useEffect","length","src","alt"],"sourceRoot":""}